import java.util.HashMap;

import objects.User;

public class TrokoServer {

	private HashMap<User, String> database;
	private User user;
	
	public static void main(String[] args) {
		// TODO Autogenerated method stub

	}
	
	/**
	 * obtem valor atual do saldo da sua conta.
	 * @return balance o valor atual do saldo da conta
	 */
	public double balance() {
		return user.getBalance();
	}
	
	/**
	 * Transfere o valor amount da conta de clientID para a conta de userID
	 * @param userID conta para a qual enviar o amount
	 * @param amount valor a transferir
	 * @throws BalanceUnavailableException
	 */
	public void makePayment(User userID, double amount) {
		if (amount > user.getBalance()) {
			System.out.println("Saldo Insuficiente na conta " + userID + "!");
		}
		if (database.get(userID) == null) {
			System.out.println("Erro ao fazer um pedido de pagamento: Utilizador"+userID+" nao existente!");
		}
		user.transfer(userID, amount);
	}
	/**
	 * Envia um pedido de pagamento ao utilizador userID, de valor amount
	 * @param userID
	 * @param amount
	 */
	public void requestPayment(User userID, double amount) {
		if (database.get(userID) == null) {
			System.out.println("Erro ao fazer um pedido de pagamento: Utilizador"+userID+" nao existente!");
		}
		//TODO request
		HashMap<User, Double> request = new HashMap<User, Double>();
		userID.addRequest(request);
		
	}
	/*
	"- requestpayment <userID> <amount> " . O pedido deve ser colocado numa lista de pagamentos pendentes
	associada ao utilizador userID. Se o utilizador nao existir assinala um erro.
	"- viewrequests " obtem do servidor a sua lista de pedidos de pagamentos pendentes. Cada
	pedido e composto por um identificador unico atribuido pelo sistema, pelo valor, e pela
	identificacao do utilizador que fez o pedido.
	"- payrequest <reqID> " autoriza o pagamento do pedido com identificador reqID,
	removendo o pedido da lista de pagamentos pendentes. Se o cliente nao tiver saldo
	suficiente na conta, deve ser retornado um erro. Se o identificador nao existir ou se for
	referente a um pagamento pedido a outro cliente, tambem deve retornar um erro.
	"- obtainQRcode <amount> " cria um pedido de pagamento no servidor e colocao numa
	lista de pagamentos identificados por QR code. Cada pedido tem um QR code unico no
	sistema, e esta associado ao clientID que criou o pedido (a quem o pagamento sera feito),
	e ao valor amount a ser pago. O servidor devera devolver uma imagem com o QR code.
	"- confirmQRcode <QRcode> " confirma e autoriza o pagamento identificado por QR code,
	removendo o pedido da lista mantida pelo servidor. Se o cliente nao tiver saldo suficiente
	na conta, deve ser retornado um erro (mas o pedido continua a ser removido da lista). Se
	o pedido identificado por QR code nao existir tambem deve retornar um erro.
	"- newgroup <groupID> " cria um grupo para pagamentos partilhados, cujo dono (owner)
	sera o cliente que o criou. Se o grupo ja existir assinala um erro.addu <userID> <groupID> "
	 adiciona o utilizador userID como membro do grupo indicado.
	Se userID ja pertencer ao grupo ou se o grupo nao existir deve ser assinalado um erro.
	Apenas os donos dos grupos podem adicionar utilizadores aos seus grupos, pelo que
	devera ser assinalado um erro caso o cliente nao seja dono do grupo.
	"- groups " mostra uma lista dos grupos de que o cliente e dono, e uma lista dos grupos a
	que pertence. Caso nao seja dono de nenhum grupo ou nao seja membro de nenhum
	grupo, esses factos deverao ser assinalados.
	"- dividepayment <groupID> <amount> " cria um pedido de pagamento de grupo, cujo valor
	total amount deve ser dividido pelos membros do grupo groupID. O pedido deve dar
	origem a pedidos individuais a serem colocados na lista de pedidos pendentes de cada
	membro do grupo. Quando todos os pedidos individuais forem pagos, o pedido de grupo
	pode ser movido para um historico de pedidos de grupo. Caso nao seja dono do grupo ou
	o grupo nao exista, deve ser assinalado um erro.
	"- statuspayments <groupID> " mostra o estado de cada pedido de pagamento de grupo, ou
	seja, que membros de grupo ainda nao pagaram esse pedido. Caso nao seja dono do grupo
	ou o grupo nao exista, deve ser assinalado um erro.
	"- history <groupID> " mostra o historico dos pagamentos do grupo groupID ja concluidos.
	Caso nao seja dono do grupo ou o grupo nao exista, deve ser assinalado um erro.*/

}
