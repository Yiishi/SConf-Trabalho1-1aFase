import java.util.HashSet;

import objects.Database;
import objects.Request;
import objects.User;

public class TrokoServer {


	private Database database;
	private User loggedUser;

	public static void main(String[] args) {
		// TODO Autogenerated method stub

	}

	/**
	 * obtem valor atual do saldo da sua conta.
	 * 
	 * @return balance o valor atual do saldo da conta
	 */
	public double balance() {
		return loggedUser.getBalance();
	}

	/**
	 * Transfere o valor amount da conta de clientID para a conta de userID
	 * 
	 * @param userID conta para a qual enviar o amount
	 * @param amount valor a transferir
	 * @throws BalanceUnavailableException
	 */
	public void makePayment(int userID, double amount) {
		User user = database.getUserById(userID);
		if (amount > loggedUser.getBalance()) {
			System.out.println("Erro ao transferir  " + "Saldo Insuficiente na conta " + loggedUser.getId() + "!");
		}
		if (user == null) {
			System.out.println("Erro ao transferir  " + "Utilizador" + loggedUser.getId() + " nao existente!");
		}
		user.transfer(userID, amount);
	}

	/**
	 * Envia um pedido de pagamento ao utilizador userID, de valor amount
	 * 
	 * @param userID o id a quem enviar o pedido
	 * @param amount o valor a pedir
	 */
	public void requestPayment(int userID, double amount) {
		User user = database.getUserById(userID);
		if (user == null) {
			System.out.println("Erro ao fazer um pedido de pagamento: " + "Utilizador " + userID + " nao existente!");
		}
		Request request = new Request(database.getUniqueRequestId(), amount, userID);
		user.addRequest(request);
	}

	/**
	 * Obtem do servidor lista de pedidos de pagamentos pendentes do utilizador.
	 * 
	 * @return a lista de pedidos de pagamentos pendentes
	 */

	public HashSet<Request> viewRequests() {
		return loggedUser.getRequests();
	}

	/**
	 * Autoriza o pagamento do pedido com identificador reqID, removendo o pedido da
	 * lista de pagamentos pendentes
	 * 
	 * @param requestId o Id do Request a pagar
	 */
	public void payRequest(int requestId) {
		Request request = database.getRequestById(requestId);
		if (request == null) {
			System.out.println("Erro ao autorizar o pagamento : Pedido " + requestId + " nao existente!");
		}
		if (request.getAmount() > loggedUser.getBalance()) {
			System.out.println("Erro ao autorizar o pagamento: Saldo Insuficiente na conta " + loggedUser.getId() + "!");
		}
		if (request.getUserID() != loggedUser.getId()) {
			System.out.println("Erro ao autorizar o pagamento: identificador referente"
					+ "a um pagamento pedido a outro cliente");
		}
		
		this.loggedUser.removeRequest(request);
	}
	/*
	 * - obtainQRcode <amount> " cria um pedido de pagamento no servidor e
	 * colocao numa lista de pagamentos identificados por QR code. Cada pedido tem
	 * um QR code unico no sistema, e esta associado ao clientID que criou o pedido
	 * (a quem o pagamento sera feito), e ao valor amount a ser pago. O servidor
	 * devera devolver uma imagem com o QR code. 
	 * 
	 * "- confirmQRcode <QRcode> "
	 * confirma e autoriza o pagamento identificado por QR code, removendo o pedido
	 * da lista mantida pelo servidor. Se o cliente nao tiver saldo suficiente na
	 * conta, deve ser retornado um erro (mas o pedido continua a ser removido da
	 * lista). Se o pedido identificado por QR code nao existir tambem deve retornar
	 * um erro. "
	 * 
	 * - newgroup <groupID> " cria um grupo para pagamentos partilhados,
	 * cujo dono (owner) sera o cliente que o criou. Se o grupo ja existir assinala
	 * um erro.
	 * 
	 * - addu <userID> <groupID> " adiciona o utilizador userID como membro do
	 * grupo indicado. Se userID ja pertencer ao grupo ou se o grupo nao existir
	 * deve ser assinalado um erro. Apenas os donos dos grupos podem adicionar
	 * utilizadores aos seus grupos, pelo que devera ser assinalado um erro caso o
	 * cliente nao seja dono do grupo. "
	 * 
	 * - groups " mostra uma lista dos grupos de
	 * que o cliente e dono, e uma lista dos grupos a que pertence. Caso nao seja
	 * dono de nenhum grupo ou nao seja membro de nenhum grupo, esses factos deverao
	 * ser assinalados. "
	 * 
	 * - dividepayment <groupID> <amount> " cria um pedido de
	 * pagamento de grupo, cujo valor total amount deve ser dividido pelos membros
	 * do grupo groupID. O pedido deve dar origem a pedidos individuais a serem
	 * colocados na lista de pedidos pendentes de cada membro do grupo. Quando todos
	 * os pedidos individuais forem pagos, o pedido de grupo pode ser movido para um
	 * historico de pedidos de grupo. Caso nao seja dono do grupo ou o grupo nao
	 * exista, deve ser assinalado um erro. "
	 * 
	 * - statuspayments <groupID> " mostra o
	 * estado de cada pedido de pagamento de grupo, ou seja, que membros de grupo
	 * ainda nao pagaram esse pedido. Caso nao seja dono do grupo ou o grupo nao
	 * exista, deve ser assinalado um erro. "
	 * 
	 * - history <groupID> " mostra o
	 * historico dos pagamentos do grupo groupID ja concluidos. Caso nao seja dono
	 * do grupo ou o grupo nao exista, deve ser assinalado um erro.
	 */

}
